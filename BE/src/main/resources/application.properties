# Social login provider props
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
spring.security.oauth2.client.registration.facebook.clientId=433381031553105
spring.security.oauth2.client.registration.facebook.clientSecret=39e8e11b27414caa2a8f2d779a13fea5
spring.security.oauth2.client.registration.google.clientId=25103423271-qajc34472grro1hutijpjosnf9h3svap.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=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
spring.security.oauth2.client.registration.github.clientId=3015988429db9de6df1c
spring.security.oauth2.client.registration.github.clientSecret=cb8876582d179d370d4b15dfc4ff977912b7006d
spring.security.oauth2.client.registration.github.scope=read:user, user:email

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:4200/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect

spring.profiles.default=Main
spring.security.user.roles=USER

logging.level.org.springframework=INFO

#Main database
spring.datasource.jdbc-url=jdbc:postgresql://localhost/STM-db
spring.datasource.username=postgres
spring.datasource.password=superuser
spring.datasource.driver-class-name=org.postgresql.Driver
spring.liquibase.change-log=classpath:changelog-root.xml



